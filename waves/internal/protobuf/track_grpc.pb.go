// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: internal/protobuf/track.proto

package waves

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WavesClient is the client API for Waves service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WavesClient interface {
	Waveform(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
}

type wavesClient struct {
	cc grpc.ClientConnInterface
}

func NewWavesClient(cc grpc.ClientConnInterface) WavesClient {
	return &wavesClient{cc}
}

func (c *wavesClient) Waveform(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/waves.Waves/Waveform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WavesServer is the server API for Waves service.
// All implementations must embed UnimplementedWavesServer
// for forward compatibility
type WavesServer interface {
	Waveform(context.Context, *TrackRequest) (*TrackResponse, error)
	mustEmbedUnimplementedWavesServer()
}

// UnimplementedWavesServer must be embedded to have forward compatible implementations.
type UnimplementedWavesServer struct {
}

func (UnimplementedWavesServer) Waveform(context.Context, *TrackRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Waveform not implemented")
}
func (UnimplementedWavesServer) mustEmbedUnimplementedWavesServer() {}

// UnsafeWavesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WavesServer will
// result in compilation errors.
type UnsafeWavesServer interface {
	mustEmbedUnimplementedWavesServer()
}

func RegisterWavesServer(s grpc.ServiceRegistrar, srv WavesServer) {
	s.RegisterService(&Waves_ServiceDesc, srv)
}

func _Waves_Waveform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WavesServer).Waveform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/waves.Waves/Waveform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WavesServer).Waveform(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Waves_ServiceDesc is the grpc.ServiceDesc for Waves service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Waves_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waves.Waves",
	HandlerType: (*WavesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Waveform",
			Handler:    _Waves_Waveform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protobuf/track.proto",
}
